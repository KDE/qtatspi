/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp org.freedesktop.atspi.Registry.xml -i proxy_marshallers.h -c QSpiRegistryProxy -p registry_proxy
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef REGISTRY_PROXY_H_1259751177
#define REGISTRY_PROXY_H_1259751177

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "proxy_marshallers.h"

/*
 * Proxy class for interface org.freedesktop.atspi.Registry
 */
class QSpiRegistryProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.freedesktop.atspi.Registry"; }

public:
    QSpiRegistryProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~QSpiRegistryProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QStringList> GetApplications()
    {
        QList<QVariant> argumentList;
        return asyncCallWithArgumentList(QLatin1String("GetApplications"), argumentList);
    }

    inline QDBusPendingReply<> RegisterApplication(const QString &app)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(app);
        return asyncCallWithArgumentList(QLatin1String("RegisterApplication"), argumentList);
    }

    inline QDBusPendingReply<> DeregisterApplication(const QString &app)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(app);
        return asyncCallWithArgumentList(QLatin1String("DeregisterApplication"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void UpdateApplications(int app, const QString &app_);
};

namespace org {
  namespace freedesktop {
    namespace atspi {
      typedef ::QSpiRegistryProxy Registry;
    }
  }
}
#endif
