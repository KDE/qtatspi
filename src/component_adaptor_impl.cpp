/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i adaptor_marshallers.h -c QSpiComponentAdaptor -a component_adaptor org.freedesktop.atspi.Component.xml
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "component_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#define ACCESSIBLE_INTERFACE static_cast <QSpiAccessibleObject *>(parent())->getInterface()

static QAccessibleInterface *getWindow (QAccessibleInterface &interface)
{
    QAccessibleInterface *current=NULL, *tmp=NULL;

    interface.navigate (QAccessible::Ancestor, 0, &current);

    while (current &&
           current->role(0) != QAccessible::Window &&
           current->role(0) != QAccessible::Application)
    {
        tmp = NULL;
        current->navigate (QAccessible::Ancestor, 1, &tmp);
        delete current;
        current = tmp;
    }

    if (current)
    {
        return current;
    }
    else
    {
        return NULL;
    }
}

static QRect getRelativeRect (QAccessibleInterface &interface)
{
    QAccessibleInterface *window;
    QRect wr, cr;

    cr = interface.rect (0);

    window = getWindow (interface);
    if (window)
    {
        wr = window->rect (0);

        cr.setX(cr.x() - wr.x());
        cr.setY(cr.x() - wr.y());
        delete window;
    }
    return cr;
}

/*
 * Implementation of adaptor class QSpiComponentAdaptor
 */

QSpiComponentAdaptor::QSpiComponentAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

QSpiComponentAdaptor::~QSpiComponentAdaptor()
{
    // destructor
}

bool QSpiComponentAdaptor::Contains(int x, int y, uint coord_type)
{
    // handle method call org.freedesktop.atspi.Component.contains
    if (coord_type == 0)
        return ACCESSIBLE_INTERFACE.rect(0).contains(x, y);
    else
        return getRelativeRect(ACCESSIBLE_INTERFACE).contains(x, y);
}

QSpiObjectAddress QSpiComponentAdaptor::GetAccessibleAtPoint(int x, int y, uint coord_type)
{
    // handle method call org.freedesktop.atspi.Component.getAccessibleAtPoint
    // TODO Return a null path. This is a silly function, may take some time to work out.
    // It should be done on the client side.
    return QDBusObjectPath ("/");
}

double QSpiComponentAdaptor::GetAlpha()
{
    // handle method call org.freedesktop.atspi.Component.getAlpha
    // TODO Find out if the QAccessible iterface needs extending to provide an alpha value.
    return 1.0;
}

QSpiRect QSpiComponentAdaptor::GetExtents(uint coord_type)
{
    // handle method call org.freedesktop.atspi.Component.getExtents
    QRect rect;
    QSpiRect val;

    if (coord_type == 0)
        rect = ACCESSIBLE_INTERFACE.rect(0);
    else
        rect = getRelativeRect (ACCESSIBLE_INTERFACE);

    val.x = rect.x ();
    val.y = rect.y ();
    val.width = rect.width ();
    val.height = rect.height ();
    return val;
}

uint QSpiComponentAdaptor::GetLayer()
{
    // handle method call org.freedesktop.atspi.Component.getLayer
    // TODO Find out if QT has any concept of 'Layers'
    return 1; // Corresponds to LAYER_WINDOW.
}

short QSpiComponentAdaptor::GetMDIZOrder()
{
    // handle method call org.freedesktop.atspi.Component.getMDIZOrder
    // TODO Does Qt have any concept of Layers?
    return 0;
}

int QSpiComponentAdaptor::GetPosition(uint coord_type, int &y)
{
    // handle method call org.freedesktop.atspi.Component.getPosition
    //return static_cast<YourObjectType *>(parent())->getPosition(coord_type, y);
    QRect rect;
    if (coord_type == 0)
        rect = ACCESSIBLE_INTERFACE.rect(0);
    else
        rect = getRelativeRect (ACCESSIBLE_INTERFACE);
    y = rect.y ();
    return rect.x ();
}

int QSpiComponentAdaptor::GetSize(int &height)
{
    // handle method call org.freedesktop.atspi.Component.getSize
    //return static_cast<YourObjectType *>(parent())->getSize(height);
    QRect rect = ACCESSIBLE_INTERFACE.rect(0);
    height = rect.height ();
    return rect.width ();
}

bool QSpiComponentAdaptor::GrabFocus()
{
    // handle method call org.freedesktop.atspi.Component.grabFocus
    // TODO This does not seem to be supported by QAccessibleInterface.
    // THIS COULD CAUSE PROBLEMS
    return false;
}
