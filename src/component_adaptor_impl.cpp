/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -i adaptor_marshallers.h -c QSpiComponentAdaptor -a component_adaptor org.freedesktop.atspi.Component.xml
 *
 * dbusxml2cpp is Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "component_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class QSpiComponentAdaptor
 */

QSpiComponentAdaptor::QSpiComponentAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

QSpiComponentAdaptor::~QSpiComponentAdaptor()
{
    // destructor
}

bool QSpiComponentAdaptor::contains(int x, int y, short coord_type)
{
    // handle method call org.freedesktop.atspi.Component.contains
    bool out0;
    QMetaObject::invokeMethod(parent(), "contains", Q_RETURN_ARG(bool, out0), Q_ARG(int, x), Q_ARG(int, y), Q_ARG(short, coord_type));
    return out0;
}

void QSpiComponentAdaptor::deregisterFocusHandler(const QDBusObjectPath &handler)
{
    // handle method call org.freedesktop.atspi.Component.deregisterFocusHandler
    QMetaObject::invokeMethod(parent(), "deregisterFocusHandler", Q_ARG(QDBusObjectPath, handler));
}

QDBusObjectPath QSpiComponentAdaptor::getAccessibleAtPoint(int x, int y, short coord_type)
{
    // handle method call org.freedesktop.atspi.Component.getAccessibleAtPoint
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "getAccessibleAtPoint", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(int, x), Q_ARG(int, y), Q_ARG(short, coord_type));
    return out0;
}

double QSpiComponentAdaptor::getAlpha()
{
    // handle method call org.freedesktop.atspi.Component.getAlpha
    double out0;
    QMetaObject::invokeMethod(parent(), "getAlpha", Q_RETURN_ARG(double, out0));
    return out0;
}

QSpiRect QSpiComponentAdaptor::getExtents(short coord_type)
{
    // handle method call org.freedesktop.atspi.Component.getExtents
    QSpiRect out0;
    QMetaObject::invokeMethod(parent(), "getExtents", Q_RETURN_ARG(QSpiRect, out0), Q_ARG(short, coord_type));
    return out0;
}

uint QSpiComponentAdaptor::getLayer()
{
    // handle method call org.freedesktop.atspi.Component.getLayer
    uint out0;
    QMetaObject::invokeMethod(parent(), "getLayer", Q_RETURN_ARG(uint, out0));
    return out0;
}

short QSpiComponentAdaptor::getMDIZOrder()
{
    // handle method call org.freedesktop.atspi.Component.getMDIZOrder
    short out0;
    QMetaObject::invokeMethod(parent(), "getMDIZOrder", Q_RETURN_ARG(short, out0));
    return out0;
}

int QSpiComponentAdaptor::getPosition(short coord_type, int &y)
{
    // handle method call org.freedesktop.atspi.Component.getPosition
    //return static_cast<YourObjectType *>(parent())->getPosition(coord_type, y);
}

int QSpiComponentAdaptor::getSize(int &height)
{
    // handle method call org.freedesktop.atspi.Component.getSize
    //return static_cast<YourObjectType *>(parent())->getSize(height);
}

bool QSpiComponentAdaptor::grabFocus()
{
    // handle method call org.freedesktop.atspi.Component.grabFocus
    bool out0;
    QMetaObject::invokeMethod(parent(), "grabFocus", Q_RETURN_ARG(bool, out0));
    return out0;
}

void QSpiComponentAdaptor::registerFocusHandler(const QDBusObjectPath &handler)
{
    // handle method call org.freedesktop.atspi.Component.registerFocusHandler
    QMetaObject::invokeMethod(parent(), "registerFocusHandler", Q_ARG(QDBusObjectPath, handler));
}

