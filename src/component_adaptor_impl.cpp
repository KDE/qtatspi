/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -i adaptor_marshallers.h -c QSpiComponentAdaptor -a component_adaptor org.freedesktop.atspi.Component.xml
 *
 * dbusxml2cpp is Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "component_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#define ACCESSIBLE_INTERFACE static_cast <QSpiAccessibleObject *>(parent())->getInterface()

/*
 * Implementation of adaptor class QSpiComponentAdaptor
 */

QSpiComponentAdaptor::QSpiComponentAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

QSpiComponentAdaptor::~QSpiComponentAdaptor()
{
    // destructor
}

bool QSpiComponentAdaptor::contains(int x, int y, short coord_type)
{
    // handle method call org.freedesktop.atspi.Component.contains
    // TODO What if the co-ord type is relative to the screen?
    return ACCESSIBLE_INTERFACE.rect(0).contains(x, y);
}

QDBusObjectPath QSpiComponentAdaptor::getAccessibleAtPoint(int x, int y, short coord_type)
{
    // handle method call org.freedesktop.atspi.Component.getAccessibleAtPoint
    // TODO Return a null path. This is a silly function, may take some time to work out.
    // It should be done on the client side.
    return QDBusObjectPath ("/");
}

double QSpiComponentAdaptor::getAlpha()
{
    // handle method call org.freedesktop.atspi.Component.getAlpha
    // TODO Find out if the QAccessible iterface needs extending to provide an alpha value.
    return 1.0;
}

QSpiRect QSpiComponentAdaptor::getExtents(short coord_type)
{
    // handle method call org.freedesktop.atspi.Component.getExtents
    // TODO What should we do if the coord_type is relative to the enclosing widget?
    QRect rect = ACCESSIBLE_INTERFACE.rect(0);
    QSpiRect val;

    val.x = rect.x ();
    val.y = rect.y ();
    val.width = rect.width ();
    val.height = rect.height ();
    return val;
}

uint QSpiComponentAdaptor::getLayer()
{
    // handle method call org.freedesktop.atspi.Component.getLayer
    // TODO Find out if QT has any concept of 'Layers'
    return 1; // Corresponds to LAYER_WINDOW.
}

short QSpiComponentAdaptor::getMDIZOrder()
{
    // handle method call org.freedesktop.atspi.Component.getMDIZOrder
    // TODO Does Qt have any concept of Layers?
    return 0;
}

int QSpiComponentAdaptor::getPosition(short coord_type, int &y)
{
    // handle method call org.freedesktop.atspi.Component.getPosition
    //return static_cast<YourObjectType *>(parent())->getPosition(coord_type, y);
    QRect rect = ACCESSIBLE_INTERFACE.rect(0);
    y = rect.y ();
    return rect.x ();
}

int QSpiComponentAdaptor::getSize(int &height)
{
    // handle method call org.freedesktop.atspi.Component.getSize
    //return static_cast<YourObjectType *>(parent())->getSize(height);
    QRect rect = ACCESSIBLE_INTERFACE.rect(0);
    height = rect.height ();
    return rect.width ();
}

bool QSpiComponentAdaptor::grabFocus()
{
    // handle method call org.freedesktop.atspi.Component.grabFocus
    // TODO This does not seem to be supported by QAccessibleInterface.
    // THIS COULD CAUSE PROBLEMS
    return false;
}
