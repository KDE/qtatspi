/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i adaptor_marshallers.h -c QSpiTextAdaptor -a text_adaptor org.freedesktop.atspi.Text.xml
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "text_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <QAccessibleTextInterface>

#define TEXT_INTERFACE static_cast <QSpiAccessibleObject *>(parent())->getInterface().textInterface()

/*
 * Implementation of adaptor class QSpiTextAdaptor
 */
QSpiTextAdaptor::QSpiTextAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

QSpiTextAdaptor::~QSpiTextAdaptor()
{
    // destructor
}

int QSpiTextAdaptor::caretOffset() const
{
    // get the value of property caretOffset
    return TEXT_INTERFACE->cursorPosition();
}

int QSpiTextAdaptor::characterCount() const
{
    // get the value of property characterCount
    return TEXT_INTERFACE->cursorPosition();
}

bool QSpiTextAdaptor::AddSelection(int startOffset, int endOffset)
{
    // handle method call org.freedesktop.atspi.Text.AddSelection
    int lastSelection = TEXT_INTERFACE->selectionCount ();
    TEXT_INTERFACE->setSelection (lastSelection, startOffset, endOffset);
    return true;
}

QSpiAttributeSet QSpiTextAdaptor::GetAttributeRun(int offset,
						    bool includeDefaults,
						    int &startOffset,
						    int &endOffset)
{
    Q_UNUSED (includeDefaults);
    return getAttributes (offset, endOffset, out2);
}

QString QSpiTextAdaptor::GetAttributeValue(int offset,
					   const QString &attributeName,
					   int &startOffset,
					   int &endOffset,
					   bool &defined)
{
    // handle method call org.freedesktop.atspi.Text.GetAttributeValue
    int         startOffset, endOffsetCopy;
    QString     joined;
    QStringList attributes;
    QSpiAttributeSet map;

    endOffsetCopy = endOffset;
    joined = TEXT_INTERFACE->attributes(offset, &startOffset, &endOffsetCopy);
    attributes = joined.split (';', QString::SkipEmptyParts, Qt::CaseSensitive);
    foreach (QString attr, attributes)
    {
        QStringList items;
        items = attr.split(':', QString::SkipEmptyParts, Qt::CaseSensitive);
        map[items[0]] = items[1];
    }
    endOffset = endOffsetCopy;
    out3 = map [attributeName];
    if (out3 == "")
       defined = TRUE;
    else
       defined = FALSE;
    return startOffset;
}

QSpiAttributeSet QSpiTextAdaptor::GetAttributes(int offset, int &startOffset, int &endOffset)
{
    // handle method call org.freedesktop.atspi.Text.GetAttributes
    int         startOffset, endOffsetCopy;
    QString     joined;
    QStringList attributes;

    endOffsetCopy = endOffset;
    joined = TEXT_INTERFACE->attributes(offset, &startOffset, &endOffsetCopy);
    attributes = joined.split (';', QString::SkipEmptyParts, Qt::CaseSensitive);
    foreach (QString attr, attributes)
    {
        QStringList items;
        items = attr.split(':', QString::SkipEmptyParts, Qt::CaseSensitive);
        out2[items[0]] = items[1];
    }
    endOffset = endOffsetCopy;
    return startOffset;
}

QSpiRangeList QSpiTextAdaptor::GetBoundedRanges(int x,
					        int y,
					        int width,
					        int height,
					        uint coordType,
					        uint xClipType,
					        uint yClipType)
{
    // handle method call org.freedesktop.atspi.Text.GetBoundedRanges
    // TODO
    Q_UNUSED (x);
    Q_UNUSED (y);
    Q_UNUSED (width);
    Q_UNUSED (height);
    Q_UNUSED (coordType);
    Q_UNUSED (xClipType);
    Q_UNUSED (yClipType);
    QSpiRangeList out0;
    return out0;
}

int QSpiTextAdaptor::GetCharacterAtOffset(int offset)
{
    // handle method call org.freedesktop.atspi.Text.GetCharacterAtOffset
    int start=offset, end=offset+1;
    QString result;
    result = TEXT_INTERFACE->textAtOffset(offset, QAccessible2::CharBoundary, &start, &end);
    return *(qPrintable (result));
}

int QSpiTextAdaptor::GetCharacterExtents(int offset, uint coordType, int &y, int &width, int &height)
{
    // handle method call org.freedesktop.atspi.Text.GetCharacterExtents
    // TODO use 'characterRect'
    Q_UNUSED (y);
    Q_UNUSED (width);
    Q_UNUSED (height);
    Q_UNUSED (offset);
    Q_UNUSED (coordType);
    return 0;
}

QStringList QSpiTextAdaptor::GetDefaultAttributeSet()
{
    // handle method call org.freedesktop.atspi.Text.GetDefaultAttributeSet
    // Empty set seems reasonable. There is no default attribute set.
    QSpiAttributeSet attributes;
    return attributes;
}

QSpiAttributeSet QSpiTextAdaptor::GetDefaultAttributes()
{
    // handle method call org.freedesktop.atspi.Text.GetDefaultAttributes
    // TODO This function should be removed. It is deprecated in favour of default attribute set.
    QSpiAttributeSet attributes;
    return attributes;
}

int QSpiTextAdaptor::GetNSelections()
{
    // handle method call org.freedesktop.atspi.Text.GetNSelections
    return TEXT_INTERFACE->selectionCount();
}

int QSpiTextAdaptor::GetOffsetAtPoint(int x, int y, uint coordType)
{
    // handle method call org.freedesktop.atspi.Text.GetOffsetAtPoint
    return TEXT_INTERFACE->offsetAtPoint (QPoint (x, y), static_cast <QAccessible2::CoordinateType> (coordType));
}

int QSpiTextAdaptor::GetRangeExtents(int startOffset, int endOffset, uint coordType, int &y, int &width, int &height)
{
    // handle method call org.freedesktop.atspi.Text.GetRangeExtents
    // TODO
    Q_UNUSED (y);
    Q_UNUSED (width);
    Q_UNUSED (height);
    Q_UNUSED (coordType);
    Q_UNUSED (startOffset);
    Q_UNUSED (endOffset);
    return 0;
}

int QSpiTextAdaptor::GetSelection(int selectionNum, int &endOffset)
{
    // handle method call org.freedesktop.atspi.Text.GetSelection
    int start, end;
    TEXT_INTERFACE->selection (selectionNum, &start, &end);
    endOffset = end;
    return start;
}

QString QSpiTextAdaptor::GetText(int startOffset, int endOffset)
{
    // handle method call org.freedesktop.atspi.Text.GetText
    return TEXT_INTERFACE->text (startOffset, endOffset);
}

QString QSpiTextAdaptor::GetTextAfterOffset(int offset, uint type, int &startOffset, int &endOffset)
{
    // handle method call org.freedesktop.atspi.Text.GetTextAfterOffset
    // TODO
    Q_UNUSED (type);
    Q_UNUSED (out2);
    Q_UNUSED (offset)
    Q_UNUSED (endOffset);
    return 0;
}

QString QSpiTextAdaptor::GetTextAtOffset(int offset, uint type, int &startOffset, int &endOffset)
{
    // handle method call org.freedesktop.atspi.Text.GetTextAtOffset
    // TODO
    Q_UNUSED (type);
    Q_UNUSED (out2);
    Q_UNUSED (offset)
    Q_UNUSED (endOffset);
    return 0;
}

QString QSpiTextAdaptor::GetTextBeforeOffset(int offset, uint type, int &startOffset, int &endOffset)
{
    // handle method call org.freedesktop.atspi.Text.GetTextBeforeOffset
    // TODO
    Q_UNUSED (type);
    Q_UNUSED (out2);
    Q_UNUSED (offset)
    Q_UNUSED (endOffset);
    return 0;
}

bool QSpiTextAdaptor::RemoveSelection(int selectionNum)
{
    // handle method call org.freedesktop.atspi.Text.RemoveSelection
    bool out0;
    QMetaObject::invokeMethod(parent(), "RemoveSelection", Q_RETURN_ARG(bool, out0), Q_ARG(int, selectionNum));
    return out0;
}

bool QSpiTextAdaptor::SetCaretOffset(int offset)
{
    // handle method call org.freedesktop.atspi.Text.SetCaretOffset
    bool out0;
    QMetaObject::invokeMethod(parent(), "SetCaretOffset", Q_RETURN_ARG(bool, out0), Q_ARG(int, offset));
    return out0;
}

bool QSpiTextAdaptor::SetSelection(int selectionNum, int startOffset, int endOffset)
{
    // handle method call org.freedesktop.atspi.Text.SetSelection
    bool out0;
    QMetaObject::invokeMethod(parent(), "SetSelection", Q_RETURN_ARG(bool, out0), Q_ARG(int, selectionNum), Q_ARG(int, startOffset), Q_ARG(int, endOffset));
    return out0;
}

