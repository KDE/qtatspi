/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -i adaptor_marshallers.h -c QSpiTextAdaptor -a text_adaptor org.freedesktop.atspi.Text.xml
 *
 * dbusxml2cpp is Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
 *
 */

#include "text_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <QAccessibleTextInterface>

/*
 * Implementation of adaptor class QSpiTextAdaptor
 */

#define TEXT_INTERFACE static_cast <QSpiAccessibleObject *>(parent())->getInterface().textInterface()

QSpiTextAdaptor::QSpiTextAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

QSpiTextAdaptor::~QSpiTextAdaptor()
{
    // destructor
}

int QSpiTextAdaptor::caretOffset() const
{
    return TEXT_INTERFACE->cursorPosition();
}

int QSpiTextAdaptor::characterCount() const
{
    return TEXT_INTERFACE->cursorPosition();
}

bool QSpiTextAdaptor::addSelection(int startOffset, int endOffset)
{
    int lastSelection = TEXT_INTERFACE->selectionCount ();
    TEXT_INTERFACE->setSelection (lastSelection, startOffset, endOffset);
    return true;
}

int QSpiTextAdaptor::getAttributeRun(int offset, bool includeDefaults, int &endOffset, QSpiAttributeSet &out2)
{
    Q_UNUSED (includeDefaults);
    return getAttributes (offset, endOffset, out2);
}

int QSpiTextAdaptor::getAttributeValue(int offset,
                                       const QString &attributeName,
                                       int &endOffset,
                                       bool &defined,
                                       QString &out3)
{
    int         startOffset, endOffsetCopy;
    QString     joined;
    QStringList attributes;
    QSpiAttributeSet map;

    endOffsetCopy = endOffset;
    joined = TEXT_INTERFACE->attributes(offset, &startOffset, &endOffsetCopy);
    attributes = joined.split (';', QString::SkipEmptyParts, Qt::CaseSensitive);
    foreach (QString attr, attributes)
    {
        QStringList items;
        items = attr.split(':', QString::SkipEmptyParts, Qt::CaseSensitive);
        map[items[0]] = items[1];
    }
    endOffset = endOffsetCopy;
    out3 = map [attributeName];
    if (out3 == "")
       defined = TRUE;
    else
       defined = FALSE;
    return startOffset;
}

int QSpiTextAdaptor::getAttributes(int offset, int &endOffset, QSpiAttributeSet &out2)
{
    int         startOffset, endOffsetCopy;
    QString     joined;
    QStringList attributes;

    endOffsetCopy = endOffset;
    joined = TEXT_INTERFACE->attributes(offset, &startOffset, &endOffsetCopy);
    attributes = joined.split (';', QString::SkipEmptyParts, Qt::CaseSensitive);
    foreach (QString attr, attributes)
    {
        QStringList items;
        items = attr.split(':', QString::SkipEmptyParts, Qt::CaseSensitive);
        out2[items[0]] = items[1];
    }
    endOffset = endOffsetCopy;
    return startOffset;
}

QSpiRangeList QSpiTextAdaptor::getBoundedRanges(int x, int y, int width, int height, short coordType, uint xClipType, uint yClipType)
{
    // TODO
    Q_UNUSED (x);
    Q_UNUSED (y);
    Q_UNUSED (width);
    Q_UNUSED (height);
    Q_UNUSED (coordType);
    Q_UNUSED (xClipType);
    Q_UNUSED (yClipType);
    QSpiRangeList out0;
    return out0;
}

int QSpiTextAdaptor::getCharacterExtents(int offset, short coordType, int &y, int &width, int &height)
{
    // TODO use 'characterRect'
    Q_UNUSED (y);
    Q_UNUSED (width);
    Q_UNUSED (height);
    Q_UNUSED (offset);
    Q_UNUSED (coordType);
    return 0;
}

int QSpiTextAdaptor::getCharacterAtOffset(int offset)
{
    int start=offset, end=offset+1;
    QString result;
    result = TEXT_INTERFACE->textAtOffset(offset, QAccessible2::CharBoundary, &start, &end);
    return *(qPrintable (result));
}

QSpiAttributeSet QSpiTextAdaptor::getDefaultAttributeSet()
{
    // Empty set seems reasonable. There is no default attribute set.
    QSpiAttributeSet attributes;
    return attributes;
}

QSpiAttributeSet QSpiTextAdaptor::getDefaultAttributes()
{
    // TODO This function should be removed. It is deprecated in favour of default attribute set.
    QSpiAttributeSet attributes;
    return attributes;
}

int QSpiTextAdaptor::getNSelections()
{
    return TEXT_INTERFACE->selectionCount();
}

int QSpiTextAdaptor::getOffsetAtPoint(int x, int y, short coordType)
{
    return TEXT_INTERFACE->offsetAtPoint (QPoint (x, y), static_cast <QAccessible2::CoordinateType> (coordType));
}

int QSpiTextAdaptor::getRangeExtents(int startOffset, int endOffset, short coordType, int &y, int &width, int &height)
{
    // TODO
    Q_UNUSED (y);
    Q_UNUSED (width);
    Q_UNUSED (height);
    Q_UNUSED (coordType);
    Q_UNUSED (startOffset);
    Q_UNUSED (endOffset);
    return 0;
}

int QSpiTextAdaptor::getSelection(int selectionNum, int &endOffset)
{
    int start, end;
    TEXT_INTERFACE->selection (selectionNum, &start, &end);
    endOffset = end;
    return start;
}

QString QSpiTextAdaptor::getText(int startOffset, int endOffset)
{
    return TEXT_INTERFACE->text (startOffset, endOffset);
}

int QSpiTextAdaptor::getTextAfterOffset(int offset, uint type, int &endOffset, QString &out2)
{
    // TODO
    Q_UNUSED (type);
    Q_UNUSED (out2);
    Q_UNUSED (offset)
    Q_UNUSED (endOffset);
    return 0;
}

int QSpiTextAdaptor::getTextAtOffset(int offset, uint type, int &endOffset, QString &out2)
{
    // TODO
    Q_UNUSED (type);
    Q_UNUSED (out2);
    Q_UNUSED (offset)
    Q_UNUSED (endOffset);
    return 0;
}

int QSpiTextAdaptor::getTextBeforeOffset(int offset, uint type, int &endOffset, QString &out2)
{
    // TODO
    Q_UNUSED (type);
    Q_UNUSED (out2);
    Q_UNUSED (offset)
    Q_UNUSED (endOffset);
    return 0;
}

bool QSpiTextAdaptor::removeSelection(int selectionNum)
{
    bool out0;
    QMetaObject::invokeMethod(parent(), "removeSelection", Q_RETURN_ARG(bool, out0), Q_ARG(int, selectionNum));
    return out0;
}

bool QSpiTextAdaptor::setCaretOffset(int offset)
{
    bool out0;
    QMetaObject::invokeMethod(parent(), "setCaretOffset", Q_RETURN_ARG(bool, out0), Q_ARG(int, offset));
    return out0;
}

bool QSpiTextAdaptor::setSelection(int selectionNum, int startOffset, int endOffset)
{
    bool out0;
    QMetaObject::invokeMethod(parent(), "setSelection", Q_RETURN_ARG(bool, out0), Q_ARG(int, selectionNum), Q_ARG(int, startOffset), Q_ARG(int, endOffset));
    return out0;
}

