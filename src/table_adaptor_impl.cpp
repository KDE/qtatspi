/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i adaptor_marshallers.h -c QSpiTableAdaptor -a table_adaptor org.freedesktop.atspi.Table.xml
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "table_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <QAccessibleTableInterface>

#define TABLE_INTERFACE      static_cast <QSpiAccessibleObject *>(parent())->getInterface().tableInterface()
#define ACCESSIBLE_INTERFACE static_cast <QSpiAccessibleObject *>(parent())->getInterface()
#define ACCESSIBLE_CACHE     static_cast <QSpiAccessibleObject *>(parent())->cache

#define MAX_SELECTED_COLUMNS 1000
#define MAX_SELECTED_ROWS    1000

/*
 * Implementation of adaptor class QSpiTableAdaptor
 */

QSpiTableAdaptor::QSpiTableAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

QSpiTableAdaptor::~QSpiTableAdaptor()
{
    // destructor
}

QDBusObjectPath QSpiTableAdaptor::caption() const
{
    // get the value of property caption
    return ACCESSIBLE_CACHE->lookupObject (TABLE_INTERFACE->caption()->object())->getPath();
}

int QSpiTableAdaptor::nColumns() const
{
    // get the value of property nColumns
    return TABLE_INTERFACE->columnCount ();
}

int QSpiTableAdaptor::nRows() const
{
    // get the value of property nRows
    return TABLE_INTERFACE->rowCount ();
}

int QSpiTableAdaptor::nSelectedColumns() const
{
    // get the value of property nSelectedColumns
    return TABLE_INTERFACE->selectedColumnCount ();
}

int QSpiTableAdaptor::nSelectedRows() const
{
    // get the value of property nSelectedRows
    return TABLE_INTERFACE->selectedRowCount ();
}

QDBusObjectPath QSpiTableAdaptor::summary() const
{
    // get the value of property summary
    return ACCESSIBLE_CACHE->lookupObject (TABLE_INTERFACE->summary()->object())->getPath();
}

bool QSpiTableAdaptor::AddColumnSelection(int column)
{
    // handle method call org.freedesktop.atspi.Table.AddColumnSelection
    TABLE_INTERFACE->selectColumn (column);
    return TRUE;
}

bool QSpiTableAdaptor::AddRowSelection(int row)
{
    // handle method call org.freedesktop.atspi.Table.AddRowSelection
    TABLE_INTERFACE->selectRow (row);
    return TRUE;
}

QSpiObjectAddress QSpiTableAdaptor::GetAccessibleAt(int row, int column)
{
    // handle method call org.freedesktop.atspi.Table.GetAccessibleAt
    return ACCESSIBLE_CACHE->lookupObject (TABLE_INTERFACE->accessibleAt(row, column)->object())->getPath();
}

int QSpiTableAdaptor::GetColumnAtIndex(int index)
{
    // handle method call org.freedesktop.atspi.Table.GetColumnAtIndex
    return TABLE_INTERFACE->columnIndex (index);
}

QString QSpiTableAdaptor::GetColumnDescription(int column)
{
    // handle method call org.freedesktop.atspi.Table.GetColumnDescription
    return TABLE_INTERFACE->columnDescription (column);
}

int QSpiTableAdaptor::GetColumnExtentAt(int row, int column)
{
    // handle method call org.freedesktop.atspi.Table.GetColumnExtentAt
    return TABLE_INTERFACE->columnSpan (row, column);
}

QSpiObjectAddress QSpiTableAdaptor::GetColumnHeader(int column)
{
    // handle method call org.freedesktop.atspi.Table.GetColumnHeader
    // TODO There should be a column param in this function right?
    return ACCESSIBLE_CACHE->lookupObject (TABLE_INTERFACE->columnHeader()->object())->getPath();
}

int QSpiTableAdaptor::GetIndexAt(int row, int column)
{
    // handle method call org.freedesktop.atspi.Table.GetIndexAt
    return TABLE_INTERFACE->childIndex (row, column);
}

int QSpiTableAdaptor::GetRowAtIndex(int index)
{
    // handle method call org.freedesktop.atspi.Table.GetRowAtIndex
    int row, column, rowSpan, columnSpan;
    bool isSelected;

    TABLE_INTERFACE->cellAtIndex (index, &row, &column, &rowSpan, &columnSpan, &isSelected);
    return row;
}

bool QSpiTableAdaptor::GetRowColumnExtentsAtIndex(int index,
						  int &row,
						  int &col,
						  int &row_extents,
						  int &col_extents,
						  bool &is_selected)
{
    // handle method call org.freedesktop.atspi.Table.GetRowColumnExtentsAtIndex
    int row, column, rowSpan, columnSpan;
    bool isSelected;

    TABLE_INTERFACE->cellAtIndex (index, &row, &column, &rowSpan, &columnSpan, &isSelected);
    col = column;
    row_extents = rowSpan;
    col_extents = columnSpan;
    is_selected = isSelected;
    if (index < ACCESSIBLE_INTERFACE.childCount())
        out5 = TRUE;
    else
        out5 = FALSE;
    return row;
}

QString QSpiTableAdaptor::GetRowDescription(int row)
{
    // handle method call org.freedesktop.atspi.Table.GetRowDescription
    return TABLE_INTERFACE->rowDescription (row);
}

int QSpiTableAdaptor::GetRowExtentAt(int row, int column)
{
    // handle method call org.freedesktop.atspi.Table.GetRowExtentAt
    return TABLE_INTERFACE->rowSpan (row, column);
}

QSpiObjectAddress QSpiTableAdaptor::GetRowHeader(int row)
{
    // handle method call org.freedesktop.atspi.Table.GetRowHeader
    // TODO There should be a row param here right?
    return ACCESSIBLE_CACHE->lookupObject (TABLE_INTERFACE->rowHeader()->object())->getPath();
}

QSpiIntList QSpiTableAdaptor::GetSelectedColumns()
{
    // handle method call org.freedesktop.atspi.Table.GetSelectedColumns
    QSpiIntList columns;
    TABLE_INTERFACE->selectedColumns (MAX_SELECTED_COLUMNS, &columns);
    return columns;
}

QSpiIntList QSpiTableAdaptor::GetSelectedRows()
{
    // handle method call org.freedesktop.atspi.Table.GetSelectedRows
    QSpiIntList rows;
    TABLE_INTERFACE->selectedRows (MAX_SELECTED_ROWS, &rows);
    return rows;
}

bool QSpiTableAdaptor::IsColumnSelected(int column)
{
    // handle method call org.freedesktop.atspi.Table.IsColumnSelected
    return TABLE_INTERFACE->isColumnSelected (column);
}

bool QSpiTableAdaptor::IsRowSelected(int row)
{
    // handle method call org.freedesktop.atspi.Table.IsRowSelected
    return TABLE_INTERFACE->isRowSelected (row);
}

bool QSpiTableAdaptor::IsSelected(int row, int column)
{
    // handle method call org.freedesktop.atspi.Table.IsSelected
    return TABLE_INTERFACE->isSelected (row, column);
}

bool QSpiTableAdaptor::RemoveColumnSelection(int column)
{
    // handle method call org.freedesktop.atspi.Table.RemoveColumnSelection
    TABLE_INTERFACE->unselectColumn (column);
    return TRUE;
}

bool QSpiTableAdaptor::RemoveRowSelection(int row)
{
    // handle method call org.freedesktop.atspi.Table.RemoveRowSelection
    TABLE_INTERFACE->unselectRow (row);
    return TRUE;
}

