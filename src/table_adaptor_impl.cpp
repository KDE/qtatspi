/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -i adaptor_marshallers.h -c QSpiTableAdaptor -a table_adaptor org.freedesktop.atspi.Table.xml
 *
 * dbusxml2cpp is Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "table_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class QSpiTableAdaptor
 */

QSpiTableAdaptor::QSpiTableAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

QSpiTableAdaptor::~QSpiTableAdaptor()
{
    // destructor
}

QDBusObjectPath QSpiTableAdaptor::caption() const
{
    // get the value of property caption
    return qvariant_cast< QDBusObjectPath >(parent()->property("caption"));
}

int QSpiTableAdaptor::nColumns() const
{
    // get the value of property nColumns
    return qvariant_cast< int >(parent()->property("nColumns"));
}

int QSpiTableAdaptor::nRows() const
{
    // get the value of property nRows
    return qvariant_cast< int >(parent()->property("nRows"));
}

int QSpiTableAdaptor::nSelectedColumns() const
{
    // get the value of property nSelectedColumns
    return qvariant_cast< int >(parent()->property("nSelectedColumns"));
}

int QSpiTableAdaptor::nSelectedRows() const
{
    // get the value of property nSelectedRows
    return qvariant_cast< int >(parent()->property("nSelectedRows"));
}

QDBusObjectPath QSpiTableAdaptor::summary() const
{
    // get the value of property summary
    return qvariant_cast< QDBusObjectPath >(parent()->property("summary"));
}

bool QSpiTableAdaptor::addColumnSelection(int column)
{
    // handle method call org.freedesktop.atspi.Table.addColumnSelection
    bool out0;
    QMetaObject::invokeMethod(parent(), "addColumnSelection", Q_RETURN_ARG(bool, out0), Q_ARG(int, column));
    return out0;
}

bool QSpiTableAdaptor::addRowSelection(int row)
{
    // handle method call org.freedesktop.atspi.Table.addRowSelection
    bool out0;
    QMetaObject::invokeMethod(parent(), "addRowSelection", Q_RETURN_ARG(bool, out0), Q_ARG(int, row));
    return out0;
}

QDBusObjectPath QSpiTableAdaptor::getAccessibleAt(int row, int column)
{
    // handle method call org.freedesktop.atspi.Table.getAccessibleAt
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "getAccessibleAt", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(int, row), Q_ARG(int, column));
    return out0;
}

int QSpiTableAdaptor::getColumnAtIndex(int index)
{
    // handle method call org.freedesktop.atspi.Table.getColumnAtIndex
    int out0;
    QMetaObject::invokeMethod(parent(), "getColumnAtIndex", Q_RETURN_ARG(int, out0), Q_ARG(int, index));
    return out0;
}

QString QSpiTableAdaptor::getColumnDescription(int column)
{
    // handle method call org.freedesktop.atspi.Table.getColumnDescription
    QString out0;
    QMetaObject::invokeMethod(parent(), "getColumnDescription", Q_RETURN_ARG(QString, out0), Q_ARG(int, column));
    return out0;
}

int QSpiTableAdaptor::getColumnExtentAt(int row, int column)
{
    // handle method call org.freedesktop.atspi.Table.getColumnExtentAt
    int out0;
    QMetaObject::invokeMethod(parent(), "getColumnExtentAt", Q_RETURN_ARG(int, out0), Q_ARG(int, row), Q_ARG(int, column));
    return out0;
}

QDBusObjectPath QSpiTableAdaptor::getColumnHeader(int column)
{
    // handle method call org.freedesktop.atspi.Table.getColumnHeader
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "getColumnHeader", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(int, column));
    return out0;
}

int QSpiTableAdaptor::getIndexAt(int row, int column)
{
    // handle method call org.freedesktop.atspi.Table.getIndexAt
    int out0;
    QMetaObject::invokeMethod(parent(), "getIndexAt", Q_RETURN_ARG(int, out0), Q_ARG(int, row), Q_ARG(int, column));
    return out0;
}

int QSpiTableAdaptor::getRowAtIndex(int index)
{
    // handle method call org.freedesktop.atspi.Table.getRowAtIndex
    int out0;
    QMetaObject::invokeMethod(parent(), "getRowAtIndex", Q_RETURN_ARG(int, out0), Q_ARG(int, index));
    return out0;
}

int QSpiTableAdaptor::getRowColumnExtentsAtIndex(int index, int &col, int &row_extents, int &col_extents, bool &is_selected, bool &out5)
{
    // handle method call org.freedesktop.atspi.Table.getRowColumnExtentsAtIndex
    //return static_cast<YourObjectType *>(parent())->getRowColumnExtentsAtIndex(index, col, row_extents, col_extents, is_selected, out5);
}

QString QSpiTableAdaptor::getRowDescription(int row)
{
    // handle method call org.freedesktop.atspi.Table.getRowDescription
    QString out0;
    QMetaObject::invokeMethod(parent(), "getRowDescription", Q_RETURN_ARG(QString, out0), Q_ARG(int, row));
    return out0;
}

int QSpiTableAdaptor::getRowExtentAt(int row, int column)
{
    // handle method call org.freedesktop.atspi.Table.getRowExtentAt
    int out0;
    QMetaObject::invokeMethod(parent(), "getRowExtentAt", Q_RETURN_ARG(int, out0), Q_ARG(int, row), Q_ARG(int, column));
    return out0;
}

QDBusObjectPath QSpiTableAdaptor::getRowHeader(int row)
{
    // handle method call org.freedesktop.atspi.Table.getRowHeader
    QDBusObjectPath out0;
    QMetaObject::invokeMethod(parent(), "getRowHeader", Q_RETURN_ARG(QDBusObjectPath, out0), Q_ARG(int, row));
    return out0;
}

QSpiSelectedColumnList QSpiTableAdaptor::getSelectedColumns()
{
    // handle method call org.freedesktop.atspi.Table.getSelectedColumns
    QSpiSelectedColumnList out0;
    QMetaObject::invokeMethod(parent(), "getSelectedColumns", Q_RETURN_ARG(QSpiSelectedColumnList, out0));
    return out0;
}

QSpiSelectedRowList QSpiTableAdaptor::getSelectedRows()
{
    // handle method call org.freedesktop.atspi.Table.getSelectedRows
    QSpiSelectedRowList out0;
    QMetaObject::invokeMethod(parent(), "getSelectedRows", Q_RETURN_ARG(QSpiSelectedRowList, out0));
    return out0;
}

bool QSpiTableAdaptor::isColumnSelected(int column)
{
    // handle method call org.freedesktop.atspi.Table.isColumnSelected
    bool out0;
    QMetaObject::invokeMethod(parent(), "isColumnSelected", Q_RETURN_ARG(bool, out0), Q_ARG(int, column));
    return out0;
}

bool QSpiTableAdaptor::isRowSelected(int row)
{
    // handle method call org.freedesktop.atspi.Table.isRowSelected
    bool out0;
    QMetaObject::invokeMethod(parent(), "isRowSelected", Q_RETURN_ARG(bool, out0), Q_ARG(int, row));
    return out0;
}

bool QSpiTableAdaptor::isSelected(int row, int column)
{
    // handle method call org.freedesktop.atspi.Table.isSelected
    bool out0;
    QMetaObject::invokeMethod(parent(), "isSelected", Q_RETURN_ARG(bool, out0), Q_ARG(int, row), Q_ARG(int, column));
    return out0;
}

bool QSpiTableAdaptor::removeColumnSelection(int column)
{
    // handle method call org.freedesktop.atspi.Table.removeColumnSelection
    bool out0;
    QMetaObject::invokeMethod(parent(), "removeColumnSelection", Q_RETURN_ARG(bool, out0), Q_ARG(int, column));
    return out0;
}

bool QSpiTableAdaptor::removeRowSelection(int row)
{
    // handle method call org.freedesktop.atspi.Table.removeRowSelection
    bool out0;
    QMetaObject::invokeMethod(parent(), "removeRowSelection", Q_RETURN_ARG(bool, out0), Q_ARG(int, row));
    return out0;
}

