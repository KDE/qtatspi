/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i adaptor_marshallers.h -c QSpiEditableTextAdaptor -a editable_text_adaptor org.freedesktop.atspi.EditableText.xml
 *
 * qdbusxml2cpp is Copyright (C) 2009 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "editable_text_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QAccessibleTextInterface>
#include <QAccessibleEditableTextInterface>

#define EDITABLE_TEXT_INTERFACE static_cast <QSpiAccessibleObject *>(parent())->getInterface().editableTextInterface()
#define TEXT_INTERFACE static_cast <QSpiAccessibleObject *>(parent())->getInterface().textInterface()

/*
 * Implementation of adaptor class QSpiEditableTextAdaptor
 */

QSpiEditableTextAdaptor::QSpiEditableTextAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

QSpiEditableTextAdaptor::~QSpiEditableTextAdaptor()
{
    // destructor
}

void QSpiEditableTextAdaptor::CopyText(int startPos, int endPos)
{
    return EDITABLE_TEXT_INTERFACE->copyText (startPos, endPos);
}

bool QSpiEditableTextAdaptor::CutText(int startPos, int endPos)
{
    // handle method call org.freedesktop.atspi.EditableText.CutText
    EDITABLE_TEXT_INTERFACE->cutText (startPos, endPos);
    return TRUE;
}

bool QSpiEditableTextAdaptor::DeleteText(int startPos, int endPos)
{
    // handle method call org.freedesktop.atspi.EditableText.DeleteText
    EDITABLE_TEXT_INTERFACE->deleteText (startPos, endPos);
    return TRUE;
}

bool QSpiEditableTextAdaptor::InsertText(int position, const QString &text, int length)
{
    // handle method call org.freedesktop.atspi.EditableText.InsertText
    QString resized (text);
    resized.resize(length);
    EDITABLE_TEXT_INTERFACE->insertText (position, text);
    return TRUE;
}

bool QSpiEditableTextAdaptor::PasteText(int position)
{
    // handle method call org.freedesktop.atspi.EditableText.PasteText
    EDITABLE_TEXT_INTERFACE->pasteText (position);
    return TRUE;
}

bool QSpiEditableTextAdaptor::SetTextContents(const QString &newContents)
{
    // handle method call org.freedesktop.atspi.EditableText.SetTextContents
    EDITABLE_TEXT_INTERFACE->replaceText (0, TEXT_INTERFACE->characterCount(), newContents);
    return TRUE;
}

