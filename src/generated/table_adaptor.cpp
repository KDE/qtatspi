/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i adaptor.h -a table_adaptor -l QSpiAdaptor ../../xml/Table.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "table_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class TableAdaptor
 */

TableAdaptor::TableAdaptor(QSpiAdaptor *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

TableAdaptor::~TableAdaptor()
{
    // destructor
}

QSpiObjectReference TableAdaptor::caption() const
{
    // get the value of property Caption
    return qvariant_cast< QSpiObjectReference >(parent()->property("Caption"));
}

int TableAdaptor::nColumns() const
{
    // get the value of property NColumns
    return qvariant_cast< int >(parent()->property("NColumns"));
}

int TableAdaptor::nRows() const
{
    // get the value of property NRows
    return qvariant_cast< int >(parent()->property("NRows"));
}

int TableAdaptor::nSelectedColumns() const
{
    // get the value of property NSelectedColumns
    return qvariant_cast< int >(parent()->property("NSelectedColumns"));
}

int TableAdaptor::nSelectedRows() const
{
    // get the value of property NSelectedRows
    return qvariant_cast< int >(parent()->property("NSelectedRows"));
}

QSpiObjectReference TableAdaptor::summary() const
{
    // get the value of property Summary
    return qvariant_cast< QSpiObjectReference >(parent()->property("Summary"));
}

bool TableAdaptor::AddColumnSelection(int column)
{
    // handle method call org.a11y.atspi.Table.AddColumnSelection
    return parent()->AddColumnSelection(column);
}

bool TableAdaptor::AddRowSelection(int row)
{
    // handle method call org.a11y.atspi.Table.AddRowSelection
    return parent()->AddRowSelection(row);
}

QSpiObjectReference TableAdaptor::GetAccessibleAt(int row, int column)
{
    // handle method call org.a11y.atspi.Table.GetAccessibleAt
    return parent()->GetAccessibleAt(row, column);
}

int TableAdaptor::GetColumnAtIndex(int index)
{
    // handle method call org.a11y.atspi.Table.GetColumnAtIndex
    return parent()->GetColumnAtIndex(index);
}

QString TableAdaptor::GetColumnDescription(int column)
{
    // handle method call org.a11y.atspi.Table.GetColumnDescription
    return parent()->GetColumnDescription(column);
}

int TableAdaptor::GetColumnExtentAt(int row, int column)
{
    // handle method call org.a11y.atspi.Table.GetColumnExtentAt
    return parent()->GetColumnExtentAt(row, column);
}

QSpiObjectReference TableAdaptor::GetColumnHeader(int column)
{
    // handle method call org.a11y.atspi.Table.GetColumnHeader
    return parent()->GetColumnHeader(column);
}

int TableAdaptor::GetIndexAt(int row, int column)
{
    // handle method call org.a11y.atspi.Table.GetIndexAt
    return parent()->GetIndexAt(row, column);
}

int TableAdaptor::GetRowAtIndex(int index)
{
    // handle method call org.a11y.atspi.Table.GetRowAtIndex
    return parent()->GetRowAtIndex(index);
}

bool TableAdaptor::GetRowColumnExtentsAtIndex(int index, int &row, int &col, int &row_extents, int &col_extents, bool &is_selected)
{
    // handle method call org.a11y.atspi.Table.GetRowColumnExtentsAtIndex
    return parent()->GetRowColumnExtentsAtIndex(index, row, col, row_extents, col_extents, is_selected);
}

QString TableAdaptor::GetRowDescription(int row)
{
    // handle method call org.a11y.atspi.Table.GetRowDescription
    return parent()->GetRowDescription(row);
}

int TableAdaptor::GetRowExtentAt(int row, int column)
{
    // handle method call org.a11y.atspi.Table.GetRowExtentAt
    return parent()->GetRowExtentAt(row, column);
}

QSpiObjectReference TableAdaptor::GetRowHeader(int row)
{
    // handle method call org.a11y.atspi.Table.GetRowHeader
    return parent()->GetRowHeader(row);
}

QSpiIntList TableAdaptor::GetSelectedColumns()
{
    // handle method call org.a11y.atspi.Table.GetSelectedColumns
    return parent()->GetSelectedColumns();
}

QSpiIntList TableAdaptor::GetSelectedRows()
{
    // handle method call org.a11y.atspi.Table.GetSelectedRows
    return parent()->GetSelectedRows();
}

bool TableAdaptor::IsColumnSelected(int column)
{
    // handle method call org.a11y.atspi.Table.IsColumnSelected
    return parent()->IsColumnSelected(column);
}

bool TableAdaptor::IsRowSelected(int row)
{
    // handle method call org.a11y.atspi.Table.IsRowSelected
    return parent()->IsRowSelected(row);
}

bool TableAdaptor::IsSelected(int row, int column)
{
    // handle method call org.a11y.atspi.Table.IsSelected
    return parent()->IsSelected(row, column);
}

bool TableAdaptor::RemoveColumnSelection(int column)
{
    // handle method call org.a11y.atspi.Table.RemoveColumnSelection
    return parent()->RemoveColumnSelection(column);
}

bool TableAdaptor::RemoveRowSelection(int row)
{
    // handle method call org.a11y.atspi.Table.RemoveRowSelection
    return parent()->RemoveRowSelection(row);
}

