/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i adaptor.h -a component_adaptor -l QSpiAdaptor ../../xml/Component.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "component_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

/*
 * Implementation of adaptor class ComponentAdaptor
 */

ComponentAdaptor::ComponentAdaptor(QSpiAdaptor *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

ComponentAdaptor::~ComponentAdaptor()
{
    // destructor
}

bool ComponentAdaptor::Contains(int x, int y, uint coord_type)
{
    // handle method call org.a11y.atspi.Component.Contains
    return parent()->Contains(x, y, coord_type);
}

QSpiObjectReference ComponentAdaptor::GetAccessibleAtPoint(int x, int y, uint coord_type)
{
    // handle method call org.a11y.atspi.Component.GetAccessibleAtPoint
    return parent()->GetAccessibleAtPoint(x, y, coord_type);
}

double ComponentAdaptor::GetAlpha()
{
    // handle method call org.a11y.atspi.Component.GetAlpha
    return parent()->GetAlpha();
}

QSpiRect ComponentAdaptor::GetExtents(uint coord_type)
{
    // handle method call org.a11y.atspi.Component.GetExtents
    return parent()->GetExtents(coord_type);
}

uint ComponentAdaptor::GetLayer()
{
    // handle method call org.a11y.atspi.Component.GetLayer
    return parent()->GetLayer();
}

short ComponentAdaptor::GetMDIZOrder()
{
    // handle method call org.a11y.atspi.Component.GetMDIZOrder
    return parent()->GetMDIZOrder();
}

int ComponentAdaptor::GetPosition(uint coord_type, int &y)
{
    // handle method call org.a11y.atspi.Component.GetPosition
    return parent()->GetPosition(coord_type, y);
}

int ComponentAdaptor::GetSize(int &height)
{
    // handle method call org.a11y.atspi.Component.GetSize
    return parent()->GetSize(height);
}

bool ComponentAdaptor::GrabFocus()
{
    // handle method call org.a11y.atspi.Component.GrabFocus
    return parent()->GrabFocus();
}

bool ComponentAdaptor::SetExtents(int x, int y, int width, int height, uint coord_type)
{
    // handle method call org.a11y.atspi.Component.SetExtents
    Q_UNUSED(x)Q_UNUSED(y)Q_UNUSED(width)Q_UNUSED(height)Q_UNUSED(coord_type)
    qWarning("Not implemented: ComponentAdaptor::SetExtents");
    return false; // FIXME parent()->SetExtents(x, y, width, height, coord_type);
}

bool ComponentAdaptor::SetPosition(int x, int y, uint coord_type)
{
    // handle method call org.a11y.atspi.Component.SetPosition
    Q_UNUSED(x)Q_UNUSED(y)Q_UNUSED(coord_type)
    qWarning("Not implemented: ComponentAdaptor::SetPosition");
    return false; // FIXME parent()->SetPosition(x, y, coord_type);
}

bool ComponentAdaptor::SetSize(int width, int height)
{
    // handle method call org.a11y.atspi.Component.SetSize
    Q_UNUSED(width)Q_UNUSED(height)
    qWarning("Not implemented: ComponentAdaptor::SetSize");
    return false; // FIXME parent()->SetSize(width, height);
}

