/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -i marshallers.h -p socket_proxy -c SocketProxy ../../xml/Socket.xml
 *
 * qdbusxml2cpp is Copyright (C) 2010 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef SOCKET_PROXY_H_1297240343
#define SOCKET_PROXY_H_1297240343

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>
#include "marshallers.h"

/*
 * Proxy class for interface org.a11y.atspi.Socket
 */
class SocketProxy: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "org.a11y.atspi.Socket"; }

public:
    SocketProxy(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~SocketProxy();

public Q_SLOTS: // METHODS
    inline QDBusPendingReply<QSpiObjectReference> Embed(const QSpiObjectReference &plug)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(plug);
        return asyncCallWithArgumentList(QLatin1String("Embed"), argumentList);
    }

    inline QDBusPendingReply<> Unembed(const QSpiObjectReference &plug)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(plug);
        return asyncCallWithArgumentList(QLatin1String("Unembed"), argumentList);
    }

Q_SIGNALS: // SIGNALS
    void Available();
};

namespace org {
  namespace a11y {
    namespace atspi {
      typedef ::SocketProxy Socket;
    }
  }
}
#endif
