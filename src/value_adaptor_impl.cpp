/*
 * This file was generated by dbusxml2cpp version 0.6
 * Command line was: dbusxml2cpp -i adaptor_marshallers.h -c QSpiValueAdaptor -a value_adaptor org.freedesktop.atspi.Value.xml
 *
 * dbusxml2cpp is Copyright (C) 2008 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#include "value_adaptor.h"
#include <QtCore/QMetaObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>

#include <QAccessibleValueInterface>


#define VALUE_INTERFACE static_cast <QSpiAccessibleObject *>(parent())->getInterface().valueInterface()

/*
 * Implementation of adaptor class QSpiValueAdaptor
 */

QSpiValueAdaptor::QSpiValueAdaptor(QObject *parent)
    : QDBusAbstractAdaptor(parent)
{
    // constructor
    setAutoRelaySignals(true);
}

QSpiValueAdaptor::~QSpiValueAdaptor()
{
    // destructor
}

double QSpiValueAdaptor::currentValue() const
{
    // get the value of property currentValue
    double val;
    bool success;
    val = VALUE_INTERFACE->currentValue().toDouble (&success);
    if (success)
    {
        return val;
    }
    else
    {
        qDebug ("QSpiAccessibleBridge: Could not convert current value to double");
        return 0.0;
    }
}

void QSpiValueAdaptor::setCurrentValue(double value)
{
    // set the value of property currentValue
    VALUE_INTERFACE->setCurrentValue(QVariant (value));
}

double QSpiValueAdaptor::maximumValue() const
{
    // get the value of property maximumValue
    double val;
    bool success;
    val = VALUE_INTERFACE->maximumValue().toDouble (&success);
    if (success)
    {
        return val;
    }
    else
    {
        qDebug ("QSpiAccessibleBridge: Could not convert maximum value to double");
        return 0.0;
    }
}

double QSpiValueAdaptor::minimumIncrement() const
{
    // get the value of property minimumIncrement
    return 0.0;
}

double QSpiValueAdaptor::minimumValue() const
{
    // get the value of property minimumValue
    double val;
    bool success;
    val = VALUE_INTERFACE->minimumValue().toDouble (&success);
    if (success)
    {
        return val;
    }
    else
    {
        qDebug ("QSpiAccessibleBridge: Could not convert minimum value to double");
        return 0.0;
    }
}

