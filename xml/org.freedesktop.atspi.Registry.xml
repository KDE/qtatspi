<?xml version="1.0" encoding="UTF-8"?>
<node xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0" name="/node">
<interface name="org.freedesktop.atspi.Registry">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>The Registry is a service through which applications providing 
      accessibility services (servers) can rendezvous with consumers of those
      services (Assistive Technologies).  The Registry is the first "port of call" for 
      accessible applications and for assistive technologies wishing to query and
      interact with those applications.  </p>

    <p>The Registry service provides four basic functions to Assistive Technology (AT) clients:
        <ol>
            <li>It provides a list of the applications who have registered with the
                AT-SPI framework, thereby announcing their participation in the AT-SPI framework.</li>
            <li>It gives access to system device events via the associated DeviceEventController interface.</li>
        </ol>
    </p>

    <p>From the point of view of accessible applications (i.e. AT-SPI service producers), 
      the Registry is primarily a registration and event delivery service.  Applications 
      normally only call the registerApplication and deregisterApplication Registry methods,
      and its inherited EventListener::notifyEvent method.  </p>

    <p>Although all application events are dispatched via the Registry, other AT client 
      calls are serviced directly by the applications, rather than being relayed via the
      Registry.  The AT client obtains references to these application objects
      via the enumeration of Desktop instances whose children are Application instances
      (Registry.getDesktopList) and via examination of the 'source' member of the Event 
      structure.   </p>

    <p>The Registry normally lives in its own process space; communication via Registry and
      both application services and AT clients takes place via IPC.  A process space diagram
      illustrating the relationship between applications, Registry, and AT is shown at:
      http://developer.gnome.org/projects/gap/tech-docs/SPIBlockDiagram.png  </p>
  </tp:docstring>

  <method name="getApplications">
    <tp:docstring>
        Gets all the currently registered applications.
    </tp:docstring>
    <arg direction="out" name="applications" type="as">
        <tp:docstring>
            A list of strings containing the D-Bus bus names of the applications.
        </tp:docstring>
    </arg>
  </method>

  <signal name="updateApplications">
    <tp:docstring>
        Updates an AT about recently added or removed applications.
    </tp:docstring>
    <arg direction="out" name="app" type="(is)">
        <annotation name="com.trolltech.QtDBus.QtTypeName.In0" value="QSpiAppUpdate"/>
        <tp:docstring>
                Unique bus name of the application that has been removed or added.
                The integer is an enumeration:
                           0 : The application has been removed.
                           1 : The application has been added.
        </tp:docstring>
    </arg>
  </signal>

  <method name="registerApplication">
    <tp:docstring>
      Register a new application with the accessibility registry.
   </tp:docstring>
   <arg direction="in" name="app" type="s" tp:type="Application">
      <tp:docstring>
         D-Bus Bus name of the application that wishes to be made accessible.
      </tp:docstring>
   </arg>
  </method>

  <method name="deregisterApplication">
   <tp:docstring>
      De-register an application from accessibility registry.
   </tp:docstring>
   <arg direction="in" name="app" type="s" tp:type="Application">
      <tp:docstring>
         D-Bus Bus name of the application that wishes to be made accessible.
      </tp:docstring>
   </arg>
  </method>

</interface>
</node>
