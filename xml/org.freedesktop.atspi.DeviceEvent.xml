<?xml version="1.0" encoding="UTF-8"?>
<node xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0" name="/node">
<tp:enum name="KeyEventType" type="u">
  <tp:docstring>
    Deprecated, DO NOT USE! 
  </tp:docstring>
  <tp:enumvalue suffix="KEY_PRESSED"/>
  <tp:enumvalue suffix="KEY_RELEASED" value="1"/>
</tp:enum>
<tp:enum name="EventType" type="u">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Used to specify the event types of interest to an EventListener, or
      to identify the type of an event for which notification has been sent. 
      @see EventTypeSeq, DeviceEvent::type</p>
  </tp:docstring>
  <tp:enumvalue suffix="KEY_PRESSED_EVENT">
  <tp:docstring>
    &lt; key on a keyboard device was pressed. 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="KEY_RELEASED_EVENT" value="1">
  <tp:docstring>
    &lt; key on a keyboard device was released. 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="BUTTON_PRESSED_EVENT" value="2">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>&lt; button on a non-keyboard human interface device 
      (HID) was pressed </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="BUTTON_RELEASED_EVENT" value="3">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>&lt; button on a non-keyboard human interface device 
      (HID) was pressed </p>
  </tp:docstring>
  </tp:enumvalue>
</tp:enum>
<tp:enum name="KeySynthType" type="u">
  <tp:docstring>
    Used when synthesizing keyboard input via DeviceEventController:generateKeyboardEvent.
  </tp:docstring>
  <tp:enumvalue suffix="KEY_PRESS">
  <tp:docstring>
    emulate the pressing of a hardware keyboard key. 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="KEY_RELEASE" value="1">
  <tp:docstring>
    emulate the release of a hardware keyboard key. 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="KEY_PRESSRELEASE" value="2">
  <tp:docstring>
    a hardware keyboard key is pressed and immediately released. 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="KEY_SYM" value="3">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>a symbolic key event is generated, without specifying a hardware key. 
      @note if the keysym is not present in the current keyboard map,
      the DeviceEventController instance has a limited ability to generate
      such keysyms on-the-fly.  Reliability of generateKeyboardEvent calls
      using out-of-keymap keysyms will vary from system to system, and on the
      number of different out-of-keymap being generated in quick succession.
      In practice this is rarely significant, since the keysyms of interest to
      AT clients and keyboard emulators are usually part of the current keymap, i.e.
      present on the system keyboard for the current locale (even if a physical
      hardware keyboard is not connected.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="KEY_STRING" value="4">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>a string is converted to its equivalent keyboard events and emitted. 
      If the string consists of complex character or composed characters
      which are not in the current keymap, string emission is subject to the
      out-of-keymap limitations described for KeySynthType::KEY_SYM.
      In practice this limitation primarily effects Chinese and Japanese locales.</p>
  </tp:docstring>
  </tp:enumvalue>
</tp:enum>
<tp:enum name="ModifierType" type="u">
  <tp:enumvalue suffix="MODIFIER_SHIFT">
  <tp:docstring>
    The left or right 'Shift' key 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="MODIFIER_SHIFTLOCK" value="1">
  <tp:docstring>
    The ShiftLock or CapsLock key 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="MODIFIER_CONTROL" value="2">
  <tp:docstring>
    'Control'/'Ctrl' 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="MODIFIER_ALT" value="3">
  <tp:docstring>
    The Alt key (as opposed to AltGr) 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="MODIFIER_META" value="4">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>depending on the platform this may map to 'Window', 'Function', 'Meta',
      'Menu', or 'NumLock'.  
      Such 'Meta keys' will map to one of META, META2, META3.
      On X Windows platforms these META values map to 
      the modifier masks Mod1Mask, Mod2Mask, Mod3Mask, e.g. an event having
      ModifierType::MODIFIER_META2 means that the 'Mod2Mask' bit is
      set in the corresponding XEvent.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="MODIFIER_META2" value="5"/>
  <tp:enumvalue suffix="MODIFIER_META3" value="6"/>
  <tp:enumvalue suffix="MODIFIER_NUMLOCK" value="7">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>A symbolic meta key name that is mapped by AT-SPI to the 
      appropriate META value, for the convenience of the client.</p>
  </tp:docstring>
  </tp:enumvalue>
</tp:enum>
<tp:struct name="EventListenerMode">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>A structure that encapsulates the characteristics of the event notifications
      that should be sent to an EventListener in response to a call to
      DeviceEventController::registerKeystrokeListener or 
      DeviceEventController::registerDeviceEventListener. </p>
  </tp:docstring>
  <tp:member type="b" tp:name="synchronous">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>&lt; If \c True, specifies that
      DeviceEventController should block while waiting 
      for client to process the requested event notifications; 
      ordinarily should be used only when client needs to perform
      operations synchronously with event delivery. Note that because
      of the architecture of device event systems in general,
      use of this flag may not block delivery of the event to 
      the currently focussed application unless it is used in 
      conjunction with the preemptive flag. </p>
  </tp:docstring>
  </tp:member>
  <tp:member type="b" tp:name="preemptive">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>&lt; If \c True, specifies that 
      Listener is allowed to pre-empt the delivery of the event,
      effectively "consuming" it such that it is not delivered 
      to the currently focussed desktop application. 
      Key events consumed via this API will not be 
      available for use by other applications or services, so this
      option should be used sparingly. </p>
  </tp:docstring>
  </tp:member>
  <tp:member type="b" tp:name="global">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>&lt; If \c True, specifies that
      Event notifications should be sent regardless of whether the
      currently focussed application participates in the AT-SPI 
      infrastructure.  On systems with the XEvIE X extension, this flag
      also allows access to events which are already subject to 
      interception via a "system keygrab" (as described in the X Window System
      documentation for XGrabKey).  The 'global' and 'preemptive' flags
      should only be used together for the purposes of registering
      "system global key shortcuts" i.e. command keys for use by the
      assistive technology. </p>
  </tp:docstring>
  </tp:member>
</tp:struct>
<tp:struct name="DeviceEvent">
  <tp:docstring>
    A structure which encapsulates information about a device event. 
  </tp:docstring>
  <tp:member type="u" tp:name="type">
  <tp:docstring>
    &lt; Identifies the type of the containing DeviceEvent. 
  </tp:docstring>
  </tp:member>
  <tp:member type="i" tp:name="id">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>&lt; an identifier which identifies this event in the event stream. 
      On X Window systems this corresponds to the XEvent serial number.</p>
  </tp:docstring>
  </tp:member>
  <tp:member type="n" tp:name="hw_code">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>&lt; a numeric code which is hardware and system-dependent, identifying the
      specific hardware button or key on the device for which the event has
      occurred. On X Window systems, for global key notifications and for most
      non-global key notifications as well, this code corresponds to the
      XKeycode.  For switch and button events it indicates the switch
      or button number.
      @note
      For technical reasons, this code may differ from the XKeycode
      when generated by Java applications for consumption by non-global
      key listeners.  This is subject to change in future versions of the
      DeviceEventController implementation.</p>
  </tp:docstring>
  </tp:member>
  <tp:member type="n" tp:name="modifiers">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>&lt; an unsigned short int consisting of zero or more of the following
      values OR'ed together:
      \li \c 1&lt;&lt;::MODIFIER_SHIFT   (=1, corresponds to Xlib's ShiftMask)
      \li \c 1&lt;&lt;::MODIFIER_SHIFTLOCK    (=2, corresponds to Xlib's LockMask)
      \li \c 1&lt;&lt;::MODIFIER_CONTROL (=4, corresponds to Xlib's ControlMask)
      \li \c 1&lt;&lt;::MODIFIER_ALT    (=8, corresponds to Xlib's Mod1Mask)
      \li \c 1&lt;&lt;::MODIFIER_META    (=16, corresponds to Xlib's Mod2Mask)
      \li \c 1&lt;&lt;::MODIFIER_META2    (=32, corresponds to Xlib's Mod3Mask)
      \li \c 1&lt;&lt;::MODIFIER_META3    (=64, corresponds to Xlib's Mod4Mask)</p>
  </tp:docstring>
  </tp:member>
  <tp:member type="i" tp:name="timestamp">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>&lt; an unsigned integer representing the time that the 
      event occurred.  On X Window systems this event is 
      a time in milliseconds from some arbitrary starting
      point; it therefore has a cycle time of approximately
      50 days.</p>
  </tp:docstring>
  </tp:member>
  <tp:member type="s" tp:name="event_string">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>&lt; A string representation of the event.  If is_text is
      \c True, then this string represents the character or typographic
      sequence that would be received by a focussed text input field.
      event_string is in general suitable for exposure to the
      end-user for purposes of keyboard echo.</p>
  </tp:docstring>
  </tp:member>
  <tp:member type="b" tp:name="is_text">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>&lt; \c True if the event results in the insertion of characters 
      into an input text buffer, or would do so if delivered to a focussed
      text input field. ¨Typographical¨ key events have this field set to
      \c True, whereas ¨control¨ key events generally do not.</p>
  </tp:docstring>
  </tp:member>
</tp:struct>
<tp:struct name="KeyDefinition">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>A structure which defines the identity of a key for which notifications
      are to be requested.  The data in the members of a ::KeyDefinition are used to
      determine which keyboard events 'match' the notification request filed by a client.  </p>

    <p>@note Ordinarily a KeyDefinition specifies one and only one of the criteria below; 
      the result of using a KeyDefinition with multiple members defined as nonzero is
      undefined.  </p>

    <p>@param keycode if nonzero, the numeric, system-dependent value corresponding to a 
      physical key on the keyboard.  Keycode values have no semantic meaning to the end-user,
      and may depend on the user's hardware and operating environment.  They therefore are
      rarely useful "as-is" to AT clients, unless the client has used operating system
      services to identify the hardward keycode associated with a particular key symbol.
      Notifications for key events requested by keycode are less dependent on modifier state
      than \c keysym based notifications, but some hardware (notably many laptops) may generate
      more than one keycode for the same physical key, depending on the state of physical 
      shift/modifier keys.
      @param keysym if nonzero, the numeric value corresponding to the X Keysym of the key for which 
      notification is requested.  Note that the presence of active modifiers will affect
      whether notification for key events requested via "keysym" specification takes place, 
      since the keysym depends on the modifier state for most keys.
      @param keystring if non-NULL, the string value of the inserted characters if the corresponding
      key event has ::KeyEvent:is_text set to \c True, or the string representing the
      'name' of the key.  On X11 systems, the string 'name' of non-printing keysyms corresponds
      to the values in "keysymdef.h" as provided by Xlib, with the leading "XK_" stripped off.</p>
  </tp:docstring>
  <tp:member type="i" tp:name="keycode"/>
  <tp:member type="i" tp:name="keysym"/>
  <tp:member type="s" tp:name="keystring"/>
  <tp:member type="i" tp:name="unused"/>
</tp:struct>
</node>
