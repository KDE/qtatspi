<?xml version="1.0" encoding="UTF-8"?>
<node xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0" name="/node">
<tp:enum name="ComponentLayer" type="u">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>The ComponentLayer of a Component instance indicates its relative stacking order
      with respect to the onscreen visual representation of the UI.
      ComponentLayer, in combination with Component bounds information, can be used
      to compute the visibility of all or part of a component.  This is important in
      programmatic determination of region-of-interest for magnification, and in
      ¨flat screen review¨ models of the screen, as well as for other uses.
      Objects residing in two of the ComponentLayer categories support
      further z-ordering information, with respect to their peers in the same layer:
      namely, LAYER_WINDOW and LAYER_MDI.  Relative stacking order for other objects within
      the same layer is not available; the recommended heuristic is ¨first child paints first¨, 
      in other words, assume that the first siblings in the child list are subject to being
      overpainted by later siblings if their bounds intersect.  </p>

    <p>The order of layers, from bottom to top, is:
	    <ol>
	    	<li>LAYER_BACKGROUND</li>
	    	<li>LAYER_WINDOW</li>
	    	<li>LAYER_MDI</li>
	    	<li>LAYER_CANVAS</li>
	    	<li>LAYER_WIDGET</li>
	    	<li>LAYER_POPUP</li>
	    	<li>LAYER_OVERLAY</li>
	    </ol>
    </p>
  </tp:docstring>
  <tp:enumvalue suffix="LAYER_INVALID">
  <tp:docstring>
    Indicates an error condition or uninitialized value. 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="LAYER_BACKGROUND" value="1">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>The bottom-most layer, over which everything else is painted. 
      The 'desktop background' is generally in this layer. </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="LAYER_CANVAS" value="2">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>The 'background' layer for most content renderers and UI Component 
      containers. </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="LAYER_WIDGET" value="3">
  <tp:docstring>
    The layer in which the majority of ordinary 'foreground' widgets reside.
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="LAYER_MDI" value="4">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>A special layer between LAYER_CANVAS and LAYER_WIDGET, in which the
      'pseudo windows' (e.g. the MDI frames) reside. 
      (See Component.getMDIZOrder) </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="LAYER_POPUP" value="5">
  <tp:docstring>
    A layer for popup window content, above LAYER_WIDGET. 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="LAYER_OVERLAY" value="6">
  <tp:docstring>
    The topmost layer. 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="LAYER_WINDOW" value="7">
  <tp:docstring>
    The layer in which a toplevel window background usually resides. 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="LAYER_LAST_DEFINED" value="8">
  <tp:docstring>
    Used only to determine the end of the enumeration. 
  </tp:docstring>
  </tp:enumvalue>
</tp:enum>
<interface name="org.freedesktop.atspi.Component">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>The Component interface is implemented by objects which occupy on-screen space, e.g. objects
      which have onscreen visual representations.  The methods in Component allow clients to identify
      where the objects lie in the onscreen coordinate system, their relative size, stacking order, and
      position.  It also provides a mechanism whereby keyboard focus may be transferred to specific
      user interface elements programmatically.  This is a 2D API, coordinates of 3D objects are projected into the
      2-dimensional screen view for purposes of this interface.  </p>

    <p>Events emitted by Component instances include:
	    <ol>
		    <li><code>"object:bounds-changed"</code></li>
		    <li><code>"object:visible-data-changed"</code></li>
	    </ol>
    </p>
  </tp:docstring>
  <method name="contains">
    <arg direction="in" name="x" type="i"/>
    <arg direction="in" name="y" type="i"/>
    <arg direction="in" name="coord_type" type="n" tp:type="short"/>
    <arg direction="out" type="b" tp:type="boolean">
    <tp:docstring>
	    <code>True</code>if the specified point lies within the Component's bounding box, <code>False</code> otherwise. 
    </tp:docstring>
    </arg>
  </method>
  <method name="getAccessibleAtPoint">
    <arg direction="in" name="x" type="i"/>
    <arg direction="in" name="y" type="i"/>
    <arg direction="in" name="coord_type" type="n" tp:type="short"/>
    <arg direction="out" type="o" tp:type="Accessible">
    <tp:docstring>
      The Accessible child whose bounding box contains the specified point. 
    </tp:docstring>
    </arg>
  </method>
  <method name="getExtents">
    <tp:docstring>
      Obtain the Component's bounding box, in pixels, relative to the specified coordinate system. 
    </tp:docstring>
    <arg direction="in" name="coord_type" type="n" tp:type="short"/>
    <arg direction="out" type="(iiii)" tp:type="BoundingBox">
    <tp:docstring>
      A BoundingBox which entirely contains the object's onscreen visual representation.
    </tp:docstring>
    </arg>
  </method>
  <method name="getPosition">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Obtain the position of the current component in the coordinate system specified
	 by <code>coord_type.</code>
      </p>
    </tp:docstring>
    <arg direction="in" name="coord_type" type="n" tp:type="short">
	    <tp:docstring>
      	    <ol>
	      <li>0 indicates coord_type_xy_screen, coordinates are relative to the display screen, in pixels.</li>
	      <li>1 indicates coord_type_xy_window, coordinates are relative to the current toplevel window, in pixels.</li>
	    </ol>
	    </tp:docstring>
    </arg>
    <arg direction="out" name="x" type="i">
	    <tp:docstring>
        	An out parameter which will be back-filled with the returned x coordinate.
	    </tp:docstring>
    </arg>
    <arg direction="out" name="y" type="i">
	    <tp:docstring>
		    <p>An out parameter which will be back-filled with the returned y coordinate.</p>
	    </tp:docstring>
    </arg>
  </method>
  <method name="getSize">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Obtain the size, in the coordinate system specified by \c coord_type, 
        of the rectangular area which fully contains the object's 
        visual representation, without accounting for viewport clipping. 
      </p>
    </tp:docstring>
    <arg direction="out" name="width" type="i">
	    <tp:docstring>
		The object's horizontal extents in the specified coordinate system.
	    </tp:docstring>
    </arg>
    <arg direction="out" name="height" type="i">
	    <tp:docstring>
		    <p>The object's vertical extents in the specified coordinate system.</p>
	    </tp:docstring>
    </arg>
  </method>
  <method name="getLayer">
    <arg direction="out" type="u" tp:type="ComponentLayer">
    <tp:docstring>
      The ComponentLayer in which this object resides. 
    </tp:docstring>
    </arg>
  </method>
  <method name="getMDIZOrder">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Obtain the relative stacking order (i.e. 'Z' order) of an object.
        Larger values indicate that an object is on "top" of the stack, therefore
        objects with smaller MDIZOrder may be obscured by objects with a larger MDIZOrder,
        but not vice-versa. This is only relevant for objects in LAYER_MDI or LAYER_WINDOW </p>
    </tp:docstring>
    <arg direction="out" type="n" tp:type="short">
    <tp:docstring>
      An integer indicating the object's place in the stacking order.
    </tp:docstring>
    </arg>
  </method>
  <method name="grabFocus">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Request that the object obtain keyboard focus.</p>
    </tp:docstring>
    <arg direction="out" type="b" tp:type="boolean">
    <tp:docstring>
	    <code>True</code> if keyboard focus was successfully transferred to the Component. 
    </tp:docstring>
    </arg>
  </method>
  <method name="registerFocusHandler">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Register an EventListener for notification when this object receives keyboard focus.
        You probably want to register for focus events via 
        Registry.registerGlobalEventListener instead. </p>
    </tp:docstring>
    <arg direction="in" name="handler" type="o" tp:type="EventListener"/>
  </method>
  <method name="deregisterFocusHandler">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Request that an EventListener registered via registerFocusHandler no longer be notified 
        when this object receives keyboard focus.</p>
    </tp:docstring>
    <arg direction="in" name="handler" type="o" tp:type="EventListener"/>
  </method>
  <method name="getAlpha">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
      <p>Obtain the alpha value of the component.  An alpha value of 1.0 or greater
        indicates that the object is fully opaque, and an alpha value of 0.0 indicates
        that the object is fully transparent.  Negative alpha values have no defined
        meaning at this time.    </p>

      <p>Alpha values are used in conjunction with Z-order calculations to
        determine whether an object wholly or partially obscures another object's 
        visual intersection, in the event that their bounds intersect.    </p>

    </tp:docstring>
    <arg direction="out" type="d"/>
  </method>
</interface>
</node>
