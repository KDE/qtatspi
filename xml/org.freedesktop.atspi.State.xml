<?xml version="1.0" encoding="UTF-8"?>
<node xmlns:tp="http://telepathy.freedesktop.org/wiki/DbusSpec#extensions-v0" name="/node">
<tp:enum name="StateType" type="u">
  <tp:enumvalue suffix="STATE_INVALID"/>
  <tp:enumvalue suffix="STATE_ACTIVE" value="1">
  <tp:docstring>
    Indicates a window is currently the active window, or is an active subelement within a container or table 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_ARMED" value="2">
  <tp:docstring>
    Indicates that the object is armed 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_BUSY" value="3">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates the current object is busy, i.e. onscreen representation is in the process of changing, or
      the object is temporarily unavailable for interaction due to activity already in progress.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_CHECKED" value="4">
  <tp:docstring>
    Indicates this object is currently checked 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_COLLAPSED" value="5">
  <tp:docstring>
    Indicates this object is collapsed 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_DEFUNCT" value="6">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates that this object no longer has a valid backing widget 
      (for instance, if its peer object has been destroyed) </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_EDITABLE" value="7">
  <tp:docstring>
    Indicates the user can change the contents of this object 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_ENABLED" value="8">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates that this object is enabled, i.e. that it currently reflects some application state. 
      Objects that are "greyed out" may lack this state, and may lack the STATE_SENSITIVE if direct user
      interaction cannot cause them to acquire STATE_ENABLED.  @see STATE_SENSITIVE.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_EXPANDABLE" value="9">
  <tp:docstring>
    Indicates this object allows progressive disclosure of its children 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_EXPANDED" value="10">
  <tp:docstring>
    Indicates this object its expanded 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_FOCUSABLE" value="11">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates this object can accept keyboard focus, which means all
      events resulting from typing on the keyboard will normally be passed
      to it when it has focus</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_FOCUSED" value="12">
  <tp:docstring>
    Indicates this object currently has the keyboard focus 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_HAS_TOOLTIP" value="13">
  <tp:docstring>
    Indicates that the object has an associated tooltip 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_HORIZONTAL" value="14">
  <tp:docstring>
    Indicates the orientation of thsi object is horizontal 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_ICONIFIED" value="15">
  <tp:docstring>
    Indicates this object is minimized and is represented only by an icon 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_MODAL" value="16">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates something must be done with this object before the user can
      interact with an object in a different window.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_MULTI_LINE" value="17">
  <tp:docstring>
    Indicates this (text) object can contain multiple lines of text 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_MULTISELECTABLE" value="18">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates this object allows more than one of its children to be
      selected at the same time, or in the case of text objects, 
      that the object supports non-contiguous text selections.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_OPAQUE" value="19">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates this object paints every pixel within its rectangular region.
      It also indicates an alpha value of unity, if it supports alpha blending. </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_PRESSED" value="20">
  <tp:docstring>
    Indicates this object is currently pressed 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_RESIZABLE" value="21">
  <tp:docstring>
    Indicates the size of this object's size is not fixed 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_SELECTABLE" value="22">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates this object is the child of an object that allows its
      children to be selected and that this child is one of those children
      that can be selected.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_SELECTED" value="23">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates this object is the child of an object that allows its
      children to be selected and that this child is one of those children
      that has been selected.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_SENSITIVE" value="24">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates this object is sensitive, e.g. to user interaction. 
      STATE_SENSITIVE usually accompanies STATE_ENABLED for user-actionable controls,
      but may be found in the absence of STATE_ENABLED if the current visible state of the 
      control is "disconnected" from the application state.  In such cases, direct user interaction
      can often result in the object gaining STATE_SENSITIVE, for instance if a user makes 
      an explicit selection using an object whose current state is ambiguous or undefined.
      @see STATE_ENABLED, STATE_INDETERMINATE. </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_SHOWING" value="25">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates this object, the object's parent, the object's parent's
      parent, and so on, are all 'shown' to the end-user, i.e.
      subject to "exposure" if blocking or obscuring objects do not interpose
      between this object and the top of the window stack.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_SINGLE_LINE" value="26">
  <tp:docstring>
    Indicates this (text) object can contain only a single line of text 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_STALE" value="27">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates that the information returned for this object may no longer be
      synchronized with the application state.  This can occur if the object has STATE_TRANSIENT,
      and can also occur towards the end of the object peer's lifecycle. </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_TRANSIENT" value="28">
  <tp:docstring>
    Indicates this object is transient 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_VERTICAL" value="29">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates the orientation of this object is vertical; for example this state may appear on 
      such objects as scrollbars, text objects (with vertical text flow), separators, etc.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_VISIBLE" value="30">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
	  <p>Indicates this object is visible, e.g. has been explicitly marked for exposure to the user.</p>
	  <p>STATE_VISIBLE is no guarantee that the object is actually unobscured on the screen, only
      that it is 'potentially' visible, barring obstruction, being scrolled or clipped out of the 
      field of view, or having an ancestor container that has not yet made visible.
      A widget is potentially onscreen if it has both STATE_VISIBLE and STATE_SHOWING.
      The absence of STATE_VISIBLE and STATE_SHOWING is semantically equivalent to saying 
      that an object is 'hidden'.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_MANAGES_DESCENDANTS" value="31">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates that "active-descendant-changed" event is sent when children
      become 'active' (i.e. are selected or navigated to onscreen).  Used to
      prevent need to enumerate all children in very large containers, like
      tables.  The presence of STATE_MANAGES_DESCENDANTS is an indication to the client.
      that the children should not, and need not, be enumerated by the client.
      Objects implementing this state are expected to provide relevant state
      notifications to listening clients, for instance notifications of visibility
      changes and activation of their contained child objects, without the client 
      having previously requested references to those children.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_INDETERMINATE" value="32">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates that a check box or other boolean indicator is in a state other than 
      checked or not checked.  This usually means that the boolean value reflected or 
      controlled by the object does not apply consistently to the entire current context.
      For example, a checkbox for the "Bold" attribute of text may have STATE_INDETERMINATE
      if the currently selected text contains a mixture of weight attributes.  
      In many cases interacting with a STATE_INDETERMINATE object will cause 
      the context's corresponding boolean attribute to be homogenized, whereupon the object
      will lose STATE_INDETERMINATE and a corresponding state-changed event will be fired.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_REQUIRED" value="33">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates that user interaction with this object is 'required' from the user, 
      for instance before completing the processing of a form.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_TRUNCATED" value="34">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
	  <p>Indicates that an object's onscreen content is truncated, e.g. a text value in a spreadsheet cell.</p> 
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_ANIMATED" value="35">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>Indicates this object's visual representation is dynamic, not static.
      This state may be applied to an object during an animated 'effect' and 
      be removed from the object once its visual representation becomes static.</p>
    <p>some applications, notably content viewers, may not be able to detect
      all kinds of animated content.  Therefore the absence of this state should not
      be taken as definitive evidence that the object's visual representation is
      static; this state is advisory.</p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_INVALID_ENTRY" value="36">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>This object has indicated an error condition due to failure of input
      validation.  For instance, a form control may acquire this state in response
      to invalid or malformed user input.  </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_SUPPORTS_AUTOCOMPLETION" value="37">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>This state indicates that the object in question implements some form of ¨typeahead¨ or 
      pre-selection behavior whereby entering the first character of one or more sub-elements
      causes those elements to scroll into view or become selected.  Subsequent character input
      may narrow the selection further as long as one or more sub-elements match the string.
      This state is normally only useful and encountered on objects that implement Selection.
      In some cases the typeahead behavior may result in full or partial ¨completion¨ of 
      the data in the input field, in which case these input events may trigger text-changed
      events from the source.  </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_SELECTABLE_TEXT" value="38">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>This state indicates that the object in question supports text selection. 
      It should only be exposed on objects which implement the Text interface, 
      in order to distinguish this state from STATE_SELECTABLE, which infers that
      the object in question is a selectable child of an object which implements
      Selection.  While similar, text selection and subelement selection are
      distinct operations.  </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_IS_DEFAULT" value="39">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>This state indicates that the object in question is the 'default' interaction object 
      in a dialog, i.e. the one that gets activated if the user presses "Enter" when the
      dialog is initially posted.  </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_VISITED" value="40">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>This state indicates that the object (typically a hyperlink)
      has already been activated or invoked, with the result that some backing data
      has been downloaded or rendered.  </p>
  </tp:docstring>
  </tp:enumvalue>
  <tp:enumvalue suffix="STATE_LAST_DEFINED" value="41">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>This value of the enumeration should not be used as a parameter, it indicates the number of
      items in the StateType enumeration.</p>
  </tp:docstring>
  </tp:enumvalue>
</tp:enum>
<interface name="org.freedesktop.atspi.StateSet">
  <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
    <p>The StateSet interface encapsulates a collection of state information.
      It allows comparison of state information between object instances, and comparisons
      of an object's state with some hypothetical collection of states.</p>
  </tp:docstring>
  <method name="contains">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
	    <p>Query a StateSet for a specific StateType.</p>
    </tp:docstring>
    <arg direction="in" name="state" type="u" tp:type="StateType">
	    <tp:docstring>
	    <p>The StateType being queried for.</p>
	    </tp:docstring>
    </arg>
    <arg direction="out" type="b" tp:type="boolean">
    <tp:docstring>
	    <Code>True</Code> if the StateSet contains StateType state.
    </tp:docstring>
    </arg>
  </method>
  <method name="add">
    <tp:docstring>
      Add a StateType to an existing StateSet, if not already present. 
    </tp:docstring>
    <arg direction="in" name="state" type="u" tp:type="StateType"/>
  </method>
  <method name="remove">
    <tp:docstring>
      Remove a StateType to an existing StateSet, if it is present. 
    </tp:docstring>
    <arg direction="in" name="state" type="u" tp:type="StateType"/>
  </method>
  <method name="equals">
    <tp:docstring xmlns="http://www.w3.org/1999/xhtml">
	    <p>Compare two statesets for equivalence.</p>
    </tp:docstring>
    <arg direction="in" name="tarStateSet" type="o" tp:type="StateSet">
	    <tp:docstring>
	    <p>The StateSet to be compared with this one.</p>
	    </tp:docstring>
    </arg>
    <arg direction="out" type="b" tp:type="boolean">
    <tp:docstring>
	    <code>True</code> if the two StateSet objects are composed of the same StateTypes. 
    </tp:docstring>
    </arg>
  </method>
  <method name="compare">
    <tp:docstring>
      Compare two StateSet instances and obtain their differences.
    </tp:docstring>
    <arg direction="in" name="compareState" type="o" tp:type="StateSet"/>
    <arg direction="out" type="o" tp:type="StateSet">
    <tp:docstring>
      A 'difference set', i.e. a StateSet consisting of those states not shared by the two sets being compared. 
    </tp:docstring>
    </arg>
  </method>
  <method name="isEmpty">
    <arg direction="out" type="b" tp:type="boolean">
    <tp:docstring>
	    <code>True</code> if the StateSet contains no states. 
    </tp:docstring>
    </arg>
  </method>
  <method name="getStates">
    <arg direction="out" type="au" tp:type="StateSeq"/>
  </method>
</interface>
</node>
